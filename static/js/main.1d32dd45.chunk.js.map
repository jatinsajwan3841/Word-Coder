{"version":3,"sources":["components/arithmetic coder/index.js","components/index.js","App.js","reportWebVitals.js","index.js"],"names":["ArithmeticCoder","code","prob","inp","inplen","length","result","count","forEach","s","probs","key","Object","fromEntries","entries","sort","fineinp","keys","tmp","values","basepairs","i","push","toFixed","np","v","t","ind","indexOf","min","max","d","Paper","elevation","style","display","flexDirection","flexWrap","listStyle","map","c","width","margin","value","index","val","Math","random","paddingBottom","Handler","React","useState","setCode","fineInput","setfineInput","setProbs","provided","setProvided","show","setShow","handleVI","e","target","name","parseFloat","useEffect","Set","AppBar","position","color","height","textAlign","paddingTop","fontSize","paddingLeft","paddingRight","Container","maxWidth","onSubmit","preventDefault","marginTop","TextField","onChange","label","fullWidth","Checkbox","inputProps","type","step","marginBottom","onBlur","Button","marginRight","variant","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d32dd45.chunk.js","sourcesContent":["import Paper from '@material-ui/core/Paper'\r\n\r\nexport default function ArithmeticCoder({ code, prob }) {\r\n    var inp = code\r\n    var inplen = inp.length\r\n    var result = []\r\n\r\n    var count = {}\r\n    ;[...inp].forEach((s) => (count[s] ? count[s]++ : (count[s] = 1)))\r\n\r\n    var probs = count\r\n\r\n    if (prob == null) {\r\n        for (let key in probs) {\r\n            probs[key] = probs[key] / inplen\r\n        }\r\n    } else probs = Object.fromEntries(Object.entries(prob).sort())\r\n\r\n    //console.log(probs)\r\n    var fineinp = Object.keys(probs)\r\n    var tmp = Object.values(probs)\r\n    var basepairs = [0]\r\n    for (let i = 0; i < tmp.length - 1; i++) {\r\n        basepairs.push(+(tmp[i] + basepairs[i]).toFixed(10))\r\n    }\r\n    basepairs.push(1)\r\n    result.push(basepairs)\r\n    //console.log(basepairs);\r\n\r\n    var np = basepairs\r\n    for (let v of inp) {\r\n        var t = []\r\n        var ind = fineinp.indexOf(v)\r\n        var min = np[ind]\r\n        var max = np[ind + 1]\r\n\r\n        t.push(min)\r\n        var d = max - min\r\n        for (let i = 0; i < fineinp.length - 1; i++)\r\n            t.push(+(d * probs[fineinp[i]] + t[i]).toFixed(10))\r\n        t.push(max)\r\n        np = t\r\n        result.push(t)\r\n        //console.log(t);\r\n    }\r\n    //result.push((np[0] + np[np.length - 1]) / 2);\r\n    //console.log((np[0] + np[np.length - 1]) / 2);\r\n\r\n    const display = () => {\r\n        return result.map((value, index) => {\r\n            return (\r\n                <li\r\n                    key={index}\r\n                    style={{\r\n                        width: '100px',\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        flexWrap: 'wrap',\r\n                        margin: '0.9rem',\r\n                    }}\r\n                >\r\n                    Iteration {index + 1}\r\n                    {value.map((val) => (\r\n                        <span key={Math.random()}>{val}</span>\r\n                    ))}\r\n                </li>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Paper elevation={3}>\r\n                <ul\r\n                    style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'row',\r\n                        flexWrap: 'wrap',\r\n                        listStyle: 'none',\r\n                    }}\r\n                >\r\n                    <li>\r\n                        {[...fineinp].map((c, i) => (\r\n                            <span\r\n                                key={i}\r\n                                style={{\r\n                                    width: '5px',\r\n                                    display: 'flex',\r\n                                    flexDirection: 'column',\r\n                                    flexWrap: 'wrap',\r\n                                    margin: '0.9rem',\r\n                                }}\r\n                            >\r\n                                {c}\r\n                            </span>\r\n                        ))}\r\n                    </li>\r\n                    {display()}\r\n                </ul>\r\n            </Paper>\r\n            <center style={{ paddingBottom: '2rem' }}>\r\n                Tag value: {(np[0] + np[np.length - 1]) / 2}\r\n            </center>\r\n        </>\r\n    )\r\n}\r\n","import ArithmeticCoder from './arithmetic coder/index'\r\nimport React, { useEffect } from 'react'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Container from '@material-ui/core/Container'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nexport default function Handler() {\r\n    const [code, setCode] = React.useState('')\r\n    const [fineInput, setfineInput] = React.useState('')\r\n    const [probs, setProbs] = React.useState(null)\r\n    const [provided, setProvided] = React.useState(false)\r\n    const [show, setShow] = React.useState(false)\r\n\r\n    const result = (e) => {\r\n        e.preventDefault()\r\n        setShow(true)\r\n    }\r\n\r\n    const handleCode = (e) => {\r\n        setCode(e.target.value)\r\n        setShow(false)\r\n    }\r\n\r\n    const handleVI = (e) => {\r\n        var tmp = {}\r\n        tmp[e.target.name] = parseFloat(e.target.value)\r\n        setProbs({ ...probs, ...tmp })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setfineInput([...new Set(code)])\r\n    }, [code])\r\n\r\n    return (\r\n        <>\r\n            <AppBar\r\n                position=\"static\"\r\n                color=\"secondary\"\r\n                style={{ height: '3rem', textAlign: 'center' }}\r\n            >\r\n                <div style={{ paddingTop: '0.5rem', fontSize: '1.5rem' }}>\r\n                    Arithmetic Coder\r\n                </div>\r\n            </AppBar>\r\n            <p style={{ paddingLeft: '1rem', paddingRight: '1rem' }}>\r\n                *general info :\r\n                <hr />\r\n                - You can input only the word to code or can provide the\r\n                probabilities along with word too. <br />- Iteration 1 is the\r\n                initial CDF of probabilities and in the last Iteration only the\r\n                max and min value is of our interest for generating tag value.\r\n            </p>\r\n            <Container maxWidth=\"sm\">\r\n                <form onSubmit={result} style={{ marginTop: '1rem' }}>\r\n                    <TextField\r\n                        name=\"word\"\r\n                        onChange={handleCode}\r\n                        value={code}\r\n                        label=\"Input Word\"\r\n                        fullWidth\r\n                    />\r\n                    <Checkbox\r\n                        onChange={() => setProvided(!provided)}\r\n                        inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                    />\r\n                    Select here to input probabilities\r\n                    {provided &&\r\n                        fineInput.map((value, index) => (\r\n                            <>\r\n                                <TextField\r\n                                    key={index}\r\n                                    type=\"number\"\r\n                                    name={value}\r\n                                    fullWidth\r\n                                    inputProps={{\r\n                                        min: '0',\r\n                                        max: '1',\r\n                                        step: '0.01',\r\n                                    }}\r\n                                    style={{ marginBottom: '1rem' }}\r\n                                    onBlur={handleVI}\r\n                                    label={`probablity of ${value}`}\r\n                                />\r\n                            </>\r\n                        ))}\r\n                    <br />\r\n                    <Button\r\n                        style={{ marginRight: '1rem' }}\r\n                        variant=\"contained\"\r\n                        type=\"submit\"\r\n                        color=\"secondary\"\r\n                    >\r\n                        Let's go!\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        type=\"reset\"\r\n                        onClick={() => {\r\n                            setCode('')\r\n                            setShow(false)\r\n                        }}\r\n                        color=\"primary\"\r\n                    >\r\n                        Reset\r\n                    </Button>\r\n                </form>\r\n                {show && <ArithmeticCoder code={code} prob={probs} />}\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n","import Handler from './components/index'\r\n\r\nfunction App() {\r\n    return <Handler />\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}